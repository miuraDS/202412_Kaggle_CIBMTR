{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":70942,"databundleVersionId":10381525,"sourceType":"competition"},{"sourceId":10639794,"sourceType":"datasetVersion","datasetId":6587547},{"sourceId":211253469,"sourceType":"kernelVersion"},{"sourceId":211322530,"sourceType":"kernelVersion"}],"dockerImageVersionId":30804,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false},"papermill":{"default_parameters":{},"duration":10108.862432,"end_time":"2024-12-13T16:07:57.072385","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-12-13T13:19:28.209953","version":"2.6.0"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"<p style=\"background-color: rgb(247, 230, 202); font-size: 300%; text-align: center; border-radius: 40px 40px; color: rgb(162, 87, 79); font-weight: bold; font-family: 'Roboto'; border: 4px solid rgb(162, 87, 79);\">Introduction</p>","metadata":{}},{"cell_type":"markdown","source":"<div style=\"background-color: rgb(247, 230, 202); border: 4px solid rgb(162, 87, 79); border-radius: 40px; padding: 20px; font-family: 'Roboto'; color: rgb(162, 87, 79); text-align: left; font-size: 120%;\">\n    <ul style=\"list-style-type: square; padding-left: 20px;\">\n        <li style=\"margin-top: 10px;\">HLA columns are recalculated as per <a href=\"https://www.kaggle.com/code/albansteff/cibmtr-eda-ensemble-model-recalculate-hla\" style=\"color: #A2574F; text-decoration: underline;\">this</a> notebook.</li>\n        <li style=\"margin-top: 10px;\">Missing values are replaced with:\n            <ul style=\"list-style-type: circle; margin-top: 10px; margin-bottom: 10px;\">\n                <li>-1 for numeric columns</li>\n                <li>Unknown for categorical columns</li>\n            </ul>\n        </li>\n        <li style=\"margin-top: 10px;\">\n            LightGBM and CatBoost are trained on 3 different targets, estimated from the survival models:\n            <ul style=\"list-style-type: circle; margin-top: 10px; margin-bottom: 10px;\">\n                <li>Cox</li>\n                <li>Kaplan-Meier</li>\n                <li>Nelson-Aalen</li>\n            </ul>\n        </li>\n        <li style=\"margin-top: 10px;\">Two additional CatBoost model are trained, with Cox loss function.</li>\n        <li style=\"margin-top: 10px;\">As per <a href=\"https://www.kaggle.com/competitions/equity-post-HCT-survival-predictions/discussion/553061\" style=\"color: #A2574F; text-decoration: underline;\">this</a> discussion post, the target is consisted of the Out-of-Fold predictions of the survival models on the validation folds to prevent target leakage.</li>\n        <li style=\"margin-top: 10px;\">\n            The ensemble prediction for each sample is computed as:\n            <ul style=\"list-style-type: circle; margin-top: 10px; margin-bottom: 10px;\">\n                <p style=\"margin-top: 10px; font-size: 110%; color: #A2574F; font-family: 'Roboto'; text-align: left;\">\n                    $ \\text{preds}_{\\text{ensemble}} = \\sum_{i=1}^{n} w_i \\cdot \\text{rankdata}(\\text{preds}_i) $\n                </p>\n                where $n$ is the number of models, $w_i$ is the weight assigned to the $i$-th model, and $\\text{rankdata}(\\text{preds}_i)$ is the rank of predictions from the $i$-th model.\n            </ul>\n        </li>\n        <li style=\"margin-top: 10px;\">Last but not least, since the competition metric evaluates only the order of predictions and not their magnitude, the model weights are not required to sum to 1, nor should the predictions fall within a predefined range.</li>\n    </ul>\n</div>","metadata":{}},{"cell_type":"markdown","source":"<p style=\"background-color: rgb(247, 230, 202); font-size: 300%; text-align: center; border-radius: 40px 40px; color: rgb(162, 87, 79); font-weight: bold; font-family: 'Roboto'; border: 4px solid rgb(162, 87, 79);\">Install Libraries</p>","metadata":{"papermill":{"duration":0.006361,"end_time":"2024-12-13T13:19:30.95227","exception":false,"start_time":"2024-12-13T13:19:30.945909","status":"completed"},"tags":[]}},{"cell_type":"code","source":"!pip install /kaggle/input/pip-install-lifelines/autograd-1.7.0-py3-none-any.whl\n!pip install /kaggle/input/pip-install-lifelines/autograd-gamma-0.5.0.tar.gz\n!pip install /kaggle/input/pip-install-lifelines/interface_meta-1.3.0-py3-none-any.whl\n!pip install /kaggle/input/pip-install-lifelines/formulaic-1.0.2-py3-none-any.whl\n!pip install /kaggle/input/pip-install-lifelines/lifelines-0.30.0-py3-none-any.whl","metadata":{"_kg_hide-output":true,"papermill":{"duration":215.181879,"end_time":"2024-12-13T13:23:06.140734","exception":false,"start_time":"2024-12-13T13:19:30.958855","status":"completed"},"tags":[],"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:53:59.038490Z","iopub.execute_input":"2025-02-15T10:53:59.039031Z","iopub.status.idle":"2025-02-15T10:57:31.231744Z","shell.execute_reply.started":"2025-02-15T10:53:59.038992Z","shell.execute_reply":"2025-02-15T10:57:31.230481Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"!pip install --no-deps /kaggle/input/pip-install-autofeat/autofeat/autofeat-2.1.3-py3-none-any.whl\n!pip install --no-deps /kaggle/input/pip-install-autofeat/autofeat/Pint-0.24.4-py3-none-any.whl\n!pip install --no-deps /kaggle/input/pip-install-autofeat/autofeat/flexcache-0.3-py3-none-any.whl\n!pip install --no-deps /kaggle/input/pip-install-autofeat/autofeat/flexparser-0.4-py3-none-any.whl\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:57:31.234602Z","iopub.execute_input":"2025-02-15T10:57:31.235144Z","iopub.status.idle":"2025-02-15T10:59:48.707536Z","shell.execute_reply.started":"2025-02-15T10:57:31.235063Z","shell.execute_reply":"2025-02-15T10:59:48.706156Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<p style=\"background-color: rgb(247, 230, 202); font-size: 300%; text-align: center; border-radius: 40px 40px; color: rgb(162, 87, 79); font-weight: bold; font-family: 'Roboto'; border: 4px solid rgb(162, 87, 79);\">Imports</p>","metadata":{}},{"cell_type":"code","source":"import warnings\nfrom pathlib import Path\nwarnings.filterwarnings('ignore')","metadata":{"papermill":{"duration":0.017318,"end_time":"2024-12-13T13:23:06.166339","exception":false,"start_time":"2024-12-13T13:23:06.149021","status":"completed"},"tags":[],"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:48.709254Z","iopub.execute_input":"2025-02-15T10:59:48.709655Z","iopub.status.idle":"2025-02-15T10:59:48.715303Z","shell.execute_reply.started":"2025-02-15T10:59:48.709619Z","shell.execute_reply":"2025-02-15T10:59:48.714171Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import numpy as np\nimport polars as pl\nimport pandas as pd\nimport plotly.colors as pc\nimport plotly.express as px\nimport plotly.graph_objects as go","metadata":{"papermill":{"duration":1.790886,"end_time":"2024-12-13T13:23:07.965236","exception":false,"start_time":"2024-12-13T13:23:06.17435","status":"completed"},"tags":[],"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:48.717577Z","iopub.execute_input":"2025-02-15T10:59:48.717918Z","iopub.status.idle":"2025-02-15T10:59:48.730946Z","shell.execute_reply.started":"2025-02-15T10:59:48.717883Z","shell.execute_reply":"2025-02-15T10:59:48.729807Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import plotly.io as pio\npio.renderers.default = 'iframe'","metadata":{"papermill":{"duration":0.172073,"end_time":"2024-12-13T13:23:08.145731","exception":false,"start_time":"2024-12-13T13:23:07.973658","status":"completed"},"tags":[],"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:48.732282Z","iopub.execute_input":"2025-02-15T10:59:48.732593Z","iopub.status.idle":"2025-02-15T10:59:48.747046Z","shell.execute_reply.started":"2025-02-15T10:59:48.732565Z","shell.execute_reply":"2025-02-15T10:59:48.745596Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"pd.options.display.max_columns = None","metadata":{"papermill":{"duration":0.016674,"end_time":"2024-12-13T13:23:08.171301","exception":false,"start_time":"2024-12-13T13:23:08.154627","status":"completed"},"tags":[],"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:48.748558Z","iopub.execute_input":"2025-02-15T10:59:48.748914Z","iopub.status.idle":"2025-02-15T10:59:48.757638Z","shell.execute_reply.started":"2025-02-15T10:59:48.748878Z","shell.execute_reply":"2025-02-15T10:59:48.756664Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from lifelines import CoxPHFitter\nfrom lifelines import KaplanMeierFitter\nfrom lifelines import NelsonAalenFitter","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:48.758961Z","iopub.execute_input":"2025-02-15T10:59:48.759312Z","iopub.status.idle":"2025-02-15T10:59:48.768886Z","shell.execute_reply.started":"2025-02-15T10:59:48.759279Z","shell.execute_reply":"2025-02-15T10:59:48.767813Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import lightgbm as lgb\nfrom metric import score\nfrom scipy.stats import rankdata \nfrom catboost import CatBoostRegressor\nfrom sklearn.model_selection import KFold\nimport joblib\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nfrom datetime import datetime\nfrom scipy.stats import yeojohnson\nimport random\nfrom autofeat import AutoFeatRegressor\nimport optuna\n\n# 全てのカラムを表示するオプションを設定\npd.set_option('display.max_columns', 1000)\npd.set_option('display.max_rows', 1000)","metadata":{"papermill":{"duration":3.110445,"end_time":"2024-12-13T13:23:11.289976","exception":false,"start_time":"2024-12-13T13:23:08.179531","status":"completed"},"tags":[],"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:48.770152Z","iopub.execute_input":"2025-02-15T10:59:48.770460Z","iopub.status.idle":"2025-02-15T10:59:50.276947Z","shell.execute_reply.started":"2025-02-15T10:59:48.770430Z","shell.execute_reply":"2025-02-15T10:59:50.275813Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<p style=\"background-color: rgb(247, 230, 202); font-size: 300%; text-align: center; border-radius: 40px 40px; color: rgb(162, 87, 79); font-weight: bold; font-family: 'Roboto'; border: 4px solid rgb(162, 87, 79);\">Configuration</p>","metadata":{"papermill":{"duration":0.00881,"end_time":"2024-12-13T13:23:11.307141","exception":false,"start_time":"2024-12-13T13:23:11.298331","status":"completed"},"tags":[]}},{"cell_type":"code","source":"class CFG:\n\n    train_path = Path('/kaggle/input/equity-post-HCT-survival-predictions/train.csv')\n    test_path = Path('/kaggle/input/equity-post-HCT-survival-predictions/test.csv')\n    subm_path = Path('/kaggle/input/equity-post-HCT-survival-predictions/sample_submission.csv')\n    \n    colorscale = 'Redor'\n    color = '#A2574F'\n\n    batch_size = 32768\n    early_stop = 300\n    penalizer = 0.01\n    n_splits = 5\n\n    weights = [2, 1, 6, 3, 6, 3, 6, 6]\n\n    ctb_params = {\n        'loss_function': 'RMSE',\n        'learning_rate': 0.03,\n        'random_state': 42,\n        'task_type': 'CPU',\n        'num_trees': 6000,\n        'reg_lambda': 8.0,\n        'depth': 8\n    }\n\n    lgb_params = {\n        'objective': 'regression',\n        'min_child_samples': 32,\n        'num_iterations': 6000,\n        'learning_rate': 0.03,\n        'extra_trees': True,\n        'reg_lambda': 8.0,\n        'reg_alpha': 0.1,\n        'num_leaves': 64,\n        'metric': 'rmse',\n        'max_depth': 8,\n        'device': 'cpu',\n        'max_bin': 128,\n        'verbose': -1,\n        'seed': 42\n    }\n\n    cox1_params = {\n        'grow_policy': 'Depthwise',\n        'min_child_samples': 8,\n        'loss_function': 'Cox',\n        'learning_rate': 0.03,\n        'random_state': 42,\n        'task_type': 'CPU',\n        'num_trees': 6000,\n        'reg_lambda': 8.0,\n        'depth': 8\n    }\n\n    cox2_params = {\n        'grow_policy': 'Lossguide',\n        'min_child_samples': 2,\n        'loss_function': 'Cox',\n        'learning_rate': 0.03,\n        'random_state': 42,\n        'task_type': 'CPU',\n        'num_trees': 6000,\n        'reg_lambda': 8.0,\n        'num_leaves': 32,\n        'depth': 8\n    }","metadata":{"papermill":{"duration":0.019849,"end_time":"2024-12-13T13:23:11.335144","exception":false,"start_time":"2024-12-13T13:23:11.315295","status":"completed"},"tags":[],"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:50.278523Z","iopub.execute_input":"2025-02-15T10:59:50.280372Z","iopub.status.idle":"2025-02-15T10:59:50.289566Z","shell.execute_reply.started":"2025-02-15T10:59:50.280318Z","shell.execute_reply":"2025-02-15T10:59:50.288331Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<p style=\"background-color: rgb(247, 230, 202); font-size: 300%; text-align: center; border-radius: 40px 40px; color: rgb(162, 87, 79); font-weight: bold; font-family: 'Roboto'; border: 4px solid rgb(162, 87, 79);\">Feature Engineering</p>","metadata":{"papermill":{"duration":0.007982,"end_time":"2024-12-13T13:23:11.351542","exception":false,"start_time":"2024-12-13T13:23:11.34356","status":"completed"},"tags":[]}},{"cell_type":"code","source":"class FE:\n\n    def __init__(self, batch_size):\n        self._batch_size = batch_size\n\n    def _load_data(self, path):\n\n        return pl.read_csv(path, batch_size=self._batch_size)\n\n    def _update_hla_columns(self, df):\n        \n        df = df.with_columns(\n            \n            pl.col('hla_match_a_low').fill_null(0)\n            .add(pl.col('hla_match_b_low').fill_null(0))\n            .add(pl.col('hla_match_drb1_high').fill_null(0))\n            .alias('hla_nmdp_6'),\n            \n            pl.col('hla_match_a_low').fill_null(0)\n            .add(pl.col('hla_match_b_low').fill_null(0))\n            .add(pl.col('hla_match_drb1_low').fill_null(0))\n            .alias('hla_low_res_6'),\n            \n            pl.col('hla_match_a_high').fill_null(0)\n            .add(pl.col('hla_match_b_high').fill_null(0))\n            .add(pl.col('hla_match_drb1_high').fill_null(0))\n            .alias('hla_high_res_6'),\n            \n            pl.col('hla_match_a_low').fill_null(0)\n            .add(pl.col('hla_match_b_low').fill_null(0))\n            .add(pl.col('hla_match_c_low').fill_null(0))\n            .add(pl.col('hla_match_drb1_low').fill_null(0))\n            .alias('hla_low_res_8'),\n            \n            pl.col('hla_match_a_high').fill_null(0)\n            .add(pl.col('hla_match_b_high').fill_null(0))\n            .add(pl.col('hla_match_c_high').fill_null(0))\n            .add(pl.col('hla_match_drb1_high').fill_null(0))\n            .alias('hla_high_res_8'),\n            \n            pl.col('hla_match_a_low').fill_null(0)\n            .add(pl.col('hla_match_b_low').fill_null(0))\n            .add(pl.col('hla_match_c_low').fill_null(0))\n            .add(pl.col('hla_match_drb1_low').fill_null(0))\n            .add(pl.col('hla_match_dqb1_low').fill_null(0))\n            .alias('hla_low_res_10'),\n            \n            pl.col('hla_match_a_high').fill_null(0)\n            .add(pl.col('hla_match_b_high').fill_null(0))\n            .add(pl.col('hla_match_c_high').fill_null(0))\n            .add(pl.col('hla_match_drb1_high').fill_null(0))\n            .add(pl.col('hla_match_dqb1_high').fill_null(0))\n            .alias('hla_high_res_10'),\n\n            (pl.col(\"diabetes\").cast(pl.Utf8) + \"_\" + pl.col(\"obesity\").cast(pl.Utf8)).alias(\"diabetes_obesity\").cast(pl.Utf8),\n            (pl.col(\"donor_age\") - pl.col(\"age_at_hct\")).alias(\"age_diff_donor-reci\"),\n            (pl.col(\"year_hct\") - 2000).alias(\"year_hct\")\n            \n        )\n    \n        return df\n\n    def _cast_datatypes(self, df):\n\n        num_cols = [\n            'hla_high_res_8',\n            'hla_low_res_8',\n            'hla_high_res_6',\n            'hla_low_res_6',\n            'hla_high_res_10',\n            'hla_low_res_10',\n            'hla_match_dqb1_high',\n            'hla_match_dqb1_low',\n            'hla_match_drb1_high',\n            'hla_match_drb1_low',\n            'hla_nmdp_6',\n            'year_hct',\n            'hla_match_a_high',\n            'hla_match_a_low',\n            'hla_match_b_high',\n            'hla_match_b_low',\n            'hla_match_c_high',\n            'hla_match_c_low',\n            'donor_age',\n            'age_at_hct',\n            'comorbidity_score',\n            'karnofsky_score',\n            'efs',\n            'efs_time'\n        ]\n\n        for col in df.columns:\n\n            if col in num_cols:\n                df = df.with_columns(pl.col(col).fill_null(-1).cast(pl.Float32))  \n\n            else:\n                df = df.with_columns(pl.col(col).fill_null('Unknown').cast(pl.String))  \n\n        return df.with_columns(pl.col('ID').cast(pl.Int32))\n\n    def info(self, df):\n        \n        print(f'\\nShape of dataframe: {df.shape}') \n        \n        mem = df.memory_usage().sum() / 1024**2\n        print('Memory usage: {:.2f} MB\\n'.format(mem))\n\n        display(df.head())\n\n    def apply_fe(self, path):\n\n        df = self._load_data(path)   \n        df = self._update_hla_columns(df)                     \n        df = self._cast_datatypes(df)        \n        df = df.to_pandas()\n        self.info(df)\n        \n        cat_cols = [col for col in df.columns if df[col].dtype == pl.String]\n\n        return df, cat_cols","metadata":{"_kg_hide-input":false,"papermill":{"duration":0.022682,"end_time":"2024-12-13T13:23:11.382481","exception":false,"start_time":"2024-12-13T13:23:11.359799","status":"completed"},"tags":[],"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:50.294347Z","iopub.execute_input":"2025-02-15T10:59:50.294793Z","iopub.status.idle":"2025-02-15T10:59:50.318380Z","shell.execute_reply.started":"2025-02-15T10:59:50.294746Z","shell.execute_reply":"2025-02-15T10:59:50.317049Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"fe = FE(CFG.batch_size)","metadata":{"_kg_hide-input":false,"papermill":{"duration":0.016709,"end_time":"2024-12-13T13:23:11.407504","exception":false,"start_time":"2024-12-13T13:23:11.390795","status":"completed"},"tags":[],"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:50.320161Z","iopub.execute_input":"2025-02-15T10:59:50.320551Z","iopub.status.idle":"2025-02-15T10:59:50.333024Z","shell.execute_reply.started":"2025-02-15T10:59:50.320517Z","shell.execute_reply":"2025-02-15T10:59:50.331872Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_data, cat_cols = fe.apply_fe(CFG.train_path)","metadata":{"papermill":{"duration":0.726911,"end_time":"2024-12-13T13:23:12.142797","exception":false,"start_time":"2024-12-13T13:23:11.415886","status":"completed"},"tags":[],"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:50.334560Z","iopub.execute_input":"2025-02-15T10:59:50.334960Z","iopub.status.idle":"2025-02-15T10:59:50.857393Z","shell.execute_reply.started":"2025-02-15T10:59:50.334925Z","shell.execute_reply":"2025-02-15T10:59:50.856179Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# カラム 'A' のユニークな値を取得\nunique_values_A = train_data['race_group'].unique()\nunique_values_A","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:50.858794Z","iopub.execute_input":"2025-02-15T10:59:50.859280Z","iopub.status.idle":"2025-02-15T10:59:50.869013Z","shell.execute_reply.started":"2025-02-15T10:59:50.859244Z","shell.execute_reply":"2025-02-15T10:59:50.867543Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"display(train_data.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:50.870570Z","iopub.execute_input":"2025-02-15T10:59:50.870941Z","iopub.status.idle":"2025-02-15T10:59:50.924504Z","shell.execute_reply.started":"2025-02-15T10:59:50.870899Z","shell.execute_reply":"2025-02-15T10:59:50.923250Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"test_data, _ = fe.apply_fe(CFG.test_path)","metadata":{"papermill":{"duration":0.075873,"end_time":"2024-12-13T13:23:12.227636","exception":false,"start_time":"2024-12-13T13:23:12.151763","status":"completed"},"tags":[],"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:50.926134Z","iopub.execute_input":"2025-02-15T10:59:50.926558Z","iopub.status.idle":"2025-02-15T10:59:50.997293Z","shell.execute_reply.started":"2025-02-15T10:59:50.926512Z","shell.execute_reply":"2025-02-15T10:59:50.996120Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<p style=\"background-color: rgb(247, 230, 202); font-size: 300%; text-align: center; border-radius: 40px 40px; color: rgb(162, 87, 79); font-weight: bold; font-family: 'Roboto'; border: 4px solid rgb(162, 87, 79);\">Model Development</p>","metadata":{"papermill":{"duration":0.009157,"end_time":"2024-12-13T13:23:12.246272","exception":false,"start_time":"2024-12-13T13:23:12.237115","status":"completed"},"tags":[]}},{"cell_type":"code","source":"class EDA:\n    \n    def __init__(self, colorscale, color, data):\n        self._colorscale = colorscale\n        self._color = color  \n        self.data = data\n\n    def _template(self, fig, title):\n        \n        fig.update_layout(\n            title=title,\n            title_x=0.5, \n            plot_bgcolor='rgba(247, 230, 202, 1)',  \n            paper_bgcolor='rgba(247, 230, 202, 1)', \n            font=dict(color=self._color),\n            margin=dict(l=72, r=72, t=72, b=72), \n            height=720\n        )\n        \n        return fig\n\n    def distribution_plot(self, col, title):\n        \n        fig = px.histogram(\n            self.data,\n            x=col,\n            nbins=100,\n            color_discrete_sequence=[self._color]\n        )\n        \n        fig.update_layout(\n            xaxis_title='Values',\n            yaxis_title='Count',\n            bargap=0.1,\n            xaxis=dict(gridcolor='grey'),\n            yaxis=dict(gridcolor='grey', zerolinecolor='grey')\n        )\n        \n        fig.update_traces(hovertemplate='Value: %{x:.2f}<br>Count: %{y:,}')\n        \n        fig = self._template(fig, f'{title}')\n        fig.show()\n    \n    def bar_chart(self, col):\n        \n        value_counts = self.data[col].value_counts().reset_index()\n        value_counts.columns = [col, 'count']\n        \n        fig = px.bar(\n            value_counts,\n            y=col,\n            x='count',\n            orientation='h',\n            color='count',\n            color_continuous_scale=self._colorscale,\n        )\n        \n        fig.update_layout(\n            xaxis_title='Count',\n            yaxis_title='',\n            xaxis=dict(gridcolor='grey'),\n            yaxis=dict(gridcolor='grey', zerolinecolor='grey')\n        )\n        \n        fig.update_traces(\n            hovertemplate=(\n                f'<b>{col}:</b> %{{y}}<br>'\n                '<b>Count:</b> %{x:,}<br>'\n            ),\n            hoverlabel=dict(\n                font=dict(color=self._color),\n                bgcolor='rgba(247, 230, 202, 1)'\n            )\n        )\n        \n        fig = self._template(fig, f'{col}')\n        fig.show()\n        \n    def _plot_cv(self, scores, title, metric='Stratified C-Index'):\n        \n        fold_scores = [round(score, 3) for score in scores]\n        mean_score = round(np.mean(scores), 3)\n\n        fig = go.Figure()\n\n        fig.add_trace(go.Scatter(\n            x = list(range(1, len(fold_scores) + 1)),\n            y = fold_scores,\n            mode = 'markers', \n            name = 'Fold Scores',\n            marker = dict(size = 27, color=self._color, symbol='diamond'),\n            text = [f'{score:.3f}' for score in fold_scores],\n            hovertemplate = 'Fold %{x}: %{text}<extra></extra>',\n            hoverlabel = dict(font=dict(size=18))  \n        ))\n\n        fig.add_trace(go.Scatter(\n            x = [1, len(fold_scores)],\n            y = [mean_score, mean_score],\n            mode = 'lines',\n            name = f'Mean: {mean_score:.3f}',\n            line = dict(dash = 'dash', color = '#B22222'),\n            hoverinfo = 'none'\n        ))\n        \n        fig.update_layout(\n            title = f'{title} | Cross-validation Mean {metric} Score: {mean_score}',\n            xaxis_title = 'Fold',\n            yaxis_title = f'{metric} Score',\n            plot_bgcolor = 'rgba(247, 230, 202, 1)',  \n            paper_bgcolor = 'rgba(247, 230, 202, 1)',\n            font = dict(color=self._color), \n            xaxis = dict(\n                gridcolor = 'grey',\n                tickmode = 'linear',\n                tick0 = 1,\n                dtick = 1,\n                range = [0.5, len(fold_scores) + 0.5],\n                zerolinecolor = 'grey'\n            ),\n            yaxis = dict(\n                gridcolor = 'grey',\n                zerolinecolor = 'grey'\n            )\n        )\n        \n        fig.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:50.999073Z","iopub.execute_input":"2025-02-15T10:59:50.999557Z","iopub.status.idle":"2025-02-15T10:59:51.018815Z","shell.execute_reply.started":"2025-02-15T10:59:50.999509Z","shell.execute_reply":"2025-02-15T10:59:51.017575Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"class Targets:\n\n    def __init__(self, data, cat_cols, penalizer, n_splits):\n        \n        self.data = data\n        self.cat_cols = cat_cols\n        \n        self._length = len(self.data)\n        self._penalizer = penalizer\n        self._n_splits = n_splits\n\n        \n    def _prepare_cv(self):\n        \n        oof_preds = np.zeros(self._length)\n            \n        cv = KFold(n_splits=self._n_splits, shuffle=True, random_state=42)\n\n        return cv, oof_preds\n\n\n    def validate_model(self, preds, title):\n            \n        y_true = self.data[['ID', 'efs', 'efs_time', 'race_group']].copy()\n        y_pred = self.data[['ID']].copy()\n        \n        y_pred['prediction'] = preds\n            \n        c_index_score = score(y_true.copy(), y_pred.copy(), 'ID')\n        print(f'Overall Stratified C-Index Score for {title}: {c_index_score:.4f}')\n\n    def create_target1(self, directory_path):  \n\n        '''\n        Constant columns are dropped if they exist in a fold. Otherwise, the code produces error:\n\n        delta contains nan value(s). Convergence halted. Please see the following tips in the lifelines documentation: \n        https://lifelines.readthedocs.io/en/latest/Examples.html#problems-with-convergence-in-the-cox-proportional-hazard-model\n        '''\n\n        cv, oof_preds = self._prepare_cv()\n\n        # Apply one hot encoding to categorical columns\n        data = pd.get_dummies(self.data, columns=self.cat_cols, drop_first=True).drop('ID', axis=1) \n\n        for fold, (train_index, valid_index) in enumerate(cv.split(data)):\n\n            train_data = data.iloc[train_index]\n            valid_data = data.iloc[valid_index]\n\n            # Drop constant columns if they exist\n            train_data = train_data.loc[:, train_data.nunique() > 1]\n            valid_data = valid_data[train_data.columns]\n\n# 学習時\n# --------------------------------------------------------------------------------------\n            cph = CoxPHFitter(penalizer=self._penalizer)\n            cph.fit(train_data, duration_col='efs_time', event_col='efs')\n            # モデルを保存\n            joblib.dump(cph, directory_path / f\"cph_model_fold{fold}.joblib\")\n# -----------------------------------------------------------------------------------------\n# モデルを読み込むとき\n# -----------------------------------------------------------\n            # モデルをロード\n            # cph = joblib.load(f\"cph_model_fold{fold}.joblib\")\n# --------------------------------------------------------------------------------\n            \n            oof_preds[valid_index] = cph.predict_partial_hazard(valid_data)              \n\n        self.data['target1'] = oof_preds \n        self.validate_model(oof_preds, 'Cox') \n\n        return self.data\n\n    def create_target2(sel, directory_path):        \n\n        cv, oof_preds = self._prepare_cv()\n\n        for fold, (train_index, valid_index) in enumerate(cv.split(self.data)):\n\n            train_data = self.data.iloc[train_index]\n            valid_data = self.data.iloc[valid_index]\n\n# KaplanMeierFitterを使用すると、特定の時間における生存率を変数として取得することができます。\n            # 学習時\n# --------------------------------------------------------------------------------------\n            kmf = KaplanMeierFitter()\n            kmf.fit(durations=train_data['efs_time'], event_observed=train_data['efs'])\n\n            # モデルを保存\n            joblib.dump(kmf, directory_path / f\"kmf_model_fold{fold}.joblib\")\n# -----------------------------------------------------------------------------------------\n# モデルを読み込むとき\n# -----------------------------------------------------------\n            # モデルをロード\n            # kmf = joblib.load(f\"kmf_model_fold{fold}.joblib\")\n# --------------------------------------------------------------------------------\n            \n            oof_preds[valid_index] = kmf.survival_function_at_times(valid_data['efs_time']).values\n\n        self.data['target2'] = oof_preds  \n        self.validate_model(oof_preds, 'Kaplan-Meier')\n\n        return self.data\n\n    def create_target3(self, directory_path):        \n\n        cv, oof_preds = self._prepare_cv()\n\n        for fold, train_index, valid_index in enumerate(cv.split(self.data)):\n\n            train_data = self.data.iloc[train_index]\n            valid_data = self.data.iloc[valid_index]\n            \n                        # 学習時\n# --------------------------------------------------------------------------------------\n            # Nelson-Aalen累積ハザード推定量を計算するためのクラスのインスタンスを作成\n            naf = NelsonAalenFitter()\n\n            naf.fit(durations=train_data['efs_time'], event_observed=train_data['efs'])\n\n\n            # モデルを保存\n            joblib.dump(naf, directory_path / f\"naf_model_fold{fold}.joblib\")\n# -----------------------------------------------------------------------------------------\n# モデルを読み込むとき\n# -----------------------------------------------------------\n            # モデルをロード\n            # naf = joblib.load(directory_path / f\"naf_model_fold{fold}.joblib\")\n# --------------------------------------------------------------------------------\n            \n            oof_preds[valid_index] = -naf.cumulative_hazard_at_times(valid_data['efs_time']).values\n\n        self.data['target3'] = oof_preds  \n        self.validate_model(oof_preds, 'Nelson-Aalen')\n\n        return self.data\n\n    def create_target4(self, directory_path):\n\n        self.data['target4'] = self.data.efs_time.copy()\n        self.data.loc[self.data.efs == 0, 'target4'] *= -1\n\n        return self.data","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:51.020695Z","iopub.execute_input":"2025-02-15T10:59:51.021175Z","iopub.status.idle":"2025-02-15T10:59:51.272663Z","shell.execute_reply.started":"2025-02-15T10:59:51.021088Z","shell.execute_reply":"2025-02-15T10:59:51.271381Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"class MD:\n    \n    def __init__(self, colorscale, color, data, cat_cols, early_stop, penalizer, n_splits):\n        \n        self.eda = EDA(colorscale, color, data)\n        self.targets = Targets(data, cat_cols, penalizer, n_splits)\n        self._n_splits = n_splits\n        \n        self.data = data\n        self.cat_cols = cat_cols\n        self._early_stop = early_stop\n\n        self.create_target = {\"target1\": self.targets.create_target1,\n                              \"target2\": self.targets.create_target2,\n                              \"target3\": self.targets.create_target3,\n                              \"target4\": self.targets.create_target4\n                             }\n        \n    def create_targets(self, target, test_data, directory_path):\n\n        # self.data = self.targets.create_target1()\n        # self.data = self.targets.create_target2()\n        # self.data = self.targets.create_target3()\n        # self.data = self.targets.create_target4()\n\n        # ユニークな値を取得\n        unique_race_values = self.data['race_group'].unique()\n\n        # # race_group ごとにデータを分割\n        race_groups = {value: self.data[self.data['race_group'] == value].copy() for value in unique_race_values}\n\n        test_race_groups = {value: self.data[self.data['race_group'] == value].copy() for value in unique_race_values}\n\n        race_afr = {}\n\n        self.data = self.create_target[target](directory_path)\n\n        new_data = self.data.copy()\n        self.data = self.data.drop(columns=[target])\n\n\n        for race_name, race_df in race_groups.items():\n\n            # 相互特徴量作成\n            cat_df = race_df[self.cat_cols]\n            # 1️⃣ 数値変数だけを抽出\n            # num_df = self.data.select_dtypes(include=[np.number])\n            num_df = race_df.drop(columns=self.cat_cols)\n            \n            # 2️⃣ AutoFeat で特徴量生成\n            self.afr = AutoFeatRegressor()\n    \n            print(f'num_df.columns->{num_df.columns}')\n            num_df_new = self.afr.fit_transform(num_df.drop(columns=[\n                target,\n                'ID',\n                'efs',\n                'efs_time']), new_data[target])\n    \n            # AutoFeatRegressor を保存\n            joblib.dump(self.afr, f\"autofeat_regressor_{race_name}_{target}.pkl\")\n    \n             # # AutoFeatRegressor をロード\n            # self.afr = joblib.load(f\"autofeat_regressor_{race_name}_{target}.pkl\")\n    \n            # 4️⃣ 元のカテゴリ変数と特徴量を結合\n            new_data = pd.concat([num_df_new, cat_df, race_df[[target, 'ID', 'efs', 'efs_time']]], axis=1)\n    \n            new_test_data = test_race_groups[race_name].copy()\n    \n            for col in self.cat_cols:\n                new_test_data[col] = new_test_data[col].astype('category')\n    \n            print(f\"len(self.cat_cols)=>{len(self.cat_cols)}\")\n\n            cat_df = new_test_data[self.cat_cols]\n\n            num_df = new_test_data.drop(columns=self.cat_cols)\n            print(f'test_num_df.columns->{num_df.columns}')\n            new_num_df = self.afr.transform(num_df.drop(columns=[\n                'ID'\n               ]))\n    \n            test_race_groups[race_name] = pd.concat([new_num_df, cat_df], axis=1)   \n\n        return race_groups, test_race_groups\n        \n    def train_model(self, params,race_groups, target, title, directory_path):\n        \n        for col in self.cat_cols:\n            self.data[col] = self.data[col].astype('category')\n\n        #  # 元のインデックスを保持\n        # train_data = train_data.sort_index()  # ここで一度ソートしておく\n\n        # # ユニークな値を取得\n        # unique_race_values = train_data['race_group'].unique()\n\n        # # # race_group ごとにデータを分割\n        # race_groups = {value: train_data[train_data['race_group'] == value] for value in unique_race_values}\n\n        race_models = {}\n\n        oof_preds = np.zeros(len(self.data))\n\n        y_true_folds = {}\n        y_pred_folds = {}\n\n        for fold in range(self._n_splits):\n            y_true_folds[fold] = []\n            y_pred_folds[fold] = []\n\n        for race_name, race_df in race_groups.items():                \n            cv = KFold(n_splits=self._n_splits, shuffle=True, random_state=42)\n                \n            X = race_df.drop(['ID', 'efs', 'efs_time', 'target1', 'target2', 'target3', 'target4'], axis=1)\n            y = race_df[target]\n            \n            models, fold_scores = [], []\n        \n            for fold, (train_index, valid_index) in enumerate(cv.split(X, y)):\n                    \n                X_train = X.iloc[train_index]\n                X_valid = X.iloc[valid_index]\n                    \n                y_train = y.iloc[train_index]\n                y_valid = y.iloc[valid_index]\n        \n                if title.startswith('LightGBM'):\n                            \n                    model = lgb.LGBMRegressor(**params)\n                            \n                    model.fit(\n                        X_train, \n                        y_train,  \n                        eval_set=[(X_valid, y_valid)],\n                        eval_metric='rmse',\n                        callbacks=[lgb.early_stopping(self._early_stop, verbose=0), lgb.log_evaluation(0)])\n                            \n                elif title.startswith('CatBoost'):\n                            \n                    model = CatBoostRegressor(**params, verbose=0, cat_features=self.cat_cols)\n                            \n                    model.fit(\n                        X_train,\n                        y_train,\n                        eval_set=(X_valid, y_valid),\n                        early_stopping_rounds=self._early_stop, \n                        verbose=0)               \n                        \n                models.append(model)\n                    \n                oof_preds[race_df.index[valid_index]] = model.predict(X_valid)  \n\n                y_true_fold = race_df.iloc[valid_index][['ID', 'efs', 'efs_time', 'race_group']].copy()\n                y_pred_fold = race_df.iloc[valid_index][['ID']].copy()\n                \n                y_pred_fold['prediction'] = oof_preds[race_df.index[valid_index]]\n    \n                y_true_folds[fold].append(y_true_fold)\n                y_pred_folds[fold].append(y_pred_fold)\n\n           # 推論結果を元のデータの順番に戻す\n            # pred_series = pd.Series(dtype=np.float64, index=self.data.index)\n            # y_preds = []\n            # for race_name, race_df in race_groups.items():\n            #     pred_series.loc[race_df.index] = oof_preds[race_df.index[valid_index]]\n\n            race_models[race_name] = models\n\n        for fold in range(len(y_true_folds)):\n            y_true_fold = pd.concat(y_true_folds[fold]).sort_index()\n            y_pred_fold = pd.concat(y_pred_folds[fold]).sort_index()\n                \n            fold_score = score(y_true_fold, y_pred_fold, 'ID')\n            fold_scores.append(fold_score)\n        self.eda._plot_cv(fold_scores, title)\n        self.targets.validate_model(oof_preds, title)\n        \n        return race_models, oof_preds\n\n    def infer_model(self, data, models):\n        \n        data = data.drop(['ID'], axis=1)\n\n        for col in self.cat_cols:\n            data[col] = data[col].astype('category')\n        \n        # 元のインデックスを保持\n        data = data.sort_index()  # ここで一度ソートしておく\n        \n        # race_group のユニークな値を取得\n        unique_race_values = data['race_group'].unique()\n        \n        # race_group ごとにデータを分割\n        race_groups = {value: data[data['race_group'] == value] for value in unique_race_values}\n        \n        # 各 race_group で推論\n        preds = {}\n        \n        for race_name, race_df in race_groups.items():\n            preds[race_name] = np.mean([model.predict(race_df) for model in models[race_name]], axis=0)\n        \n        # 推論結果を元のデータの順番に戻す\n        pred_series = pd.Series(dtype=np.float64, index=data.index)\n        \n        for race_name, race_df in race_groups.items():\n            pred_series.loc[race_df.index] = preds[race_name]\n        \n        # 最終的に元のデータと同じ順番に並べる\n        pred_series = pred_series.sort_index()\n        \n        return pred_series.to_numpy()","metadata":{"_kg_hide-input":false,"papermill":{"duration":0.039648,"end_time":"2024-12-13T13:23:12.295144","exception":false,"start_time":"2024-12-13T13:23:12.255496","status":"completed"},"tags":[],"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:51.274814Z","iopub.execute_input":"2025-02-15T10:59:51.275368Z","iopub.status.idle":"2025-02-15T10:59:51.304764Z","shell.execute_reply.started":"2025-02-15T10:59:51.275317Z","shell.execute_reply":"2025-02-15T10:59:51.303590Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"md = MD(CFG.colorscale, CFG.color, train_data, cat_cols, CFG.early_stop, CFG.penalizer, CFG.n_splits)","metadata":{"_kg_hide-input":false,"papermill":{"duration":0.01829,"end_time":"2024-12-13T13:23:12.32397","exception":false,"start_time":"2024-12-13T13:23:12.30568","status":"completed"},"tags":[],"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:51.306074Z","iopub.execute_input":"2025-02-15T10:59:51.306500Z","iopub.status.idle":"2025-02-15T10:59:51.329045Z","shell.execute_reply.started":"2025-02-15T10:59:51.306467Z","shell.execute_reply":"2025-02-15T10:59:51.327904Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# 現在の日時を取得してフォーマット\ncurrent_datetime = datetime.now().strftime(\"%Y-%m-%d_%H-%M-%S\")\n# ディレクトリ名を作成\ndirectory_name = f\"model_{current_datetime}\"\n\n# ディレクトリのパスを指定\ndirectory_path = Path(directory_name)\n\n# ディレクトリを作成\ndirectory_path.mkdir(parents=True, exist_ok=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:51.330516Z","iopub.execute_input":"2025-02-15T10:59:51.330876Z","iopub.status.idle":"2025-02-15T10:59:51.341638Z","shell.execute_reply.started":"2025-02-15T10:59:51.330821Z","shell.execute_reply":"2025-02-15T10:59:51.340662Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"race_groups, test_race_groups = md.create_targets(\"target1\", test_data, directory_path)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:51.343005Z","iopub.execute_input":"2025-02-15T10:59:51.343374Z","iopub.status.idle":"2025-02-15T10:59:51.598171Z","shell.execute_reply.started":"2025-02-15T10:59:51.343343Z","shell.execute_reply":"2025-02-15T10:59:51.595293Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"md.eda.bar_chart('race_group')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:51.599208Z","iopub.status.idle":"2025-02-15T10:59:51.599597Z","shell.execute_reply.started":"2025-02-15T10:59:51.599421Z","shell.execute_reply":"2025-02-15T10:59:51.599440Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"md.eda.distribution_plot('target1', 'Cox Target')","metadata":{"papermill":{"duration":39.008232,"end_time":"2024-12-13T13:23:51.341762","exception":false,"start_time":"2024-12-13T13:23:12.33353","status":"completed"},"tags":[],"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:51.601946Z","iopub.status.idle":"2025-02-15T10:59:51.602521Z","shell.execute_reply.started":"2025-02-15T10:59:51.602243Z","shell.execute_reply":"2025-02-15T10:59:51.602272Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"md.eda.distribution_plot('target2', 'Kaplan-Meier Target')","metadata":{"papermill":{"duration":0.180799,"end_time":"2024-12-13T13:23:51.538524","exception":false,"start_time":"2024-12-13T13:23:51.357725","status":"completed"},"tags":[],"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:51.604514Z","iopub.status.idle":"2025-02-15T10:59:51.605321Z","shell.execute_reply.started":"2025-02-15T10:59:51.604782Z","shell.execute_reply":"2025-02-15T10:59:51.604811Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"md.eda.distribution_plot('target3', 'Nelson-Aalen Target')","metadata":{"papermill":{"duration":0.169091,"end_time":"2024-12-13T13:23:51.718819","exception":false,"start_time":"2024-12-13T13:23:51.549728","status":"completed"},"tags":[],"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:51.606724Z","iopub.status.idle":"2025-02-15T10:59:51.607300Z","shell.execute_reply.started":"2025-02-15T10:59:51.606991Z","shell.execute_reply":"2025-02-15T10:59:51.607019Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"md.eda.distribution_plot('target4', 'Cox-Loss Target')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:51.608625Z","iopub.status.idle":"2025-02-15T10:59:51.608980Z","shell.execute_reply.started":"2025-02-15T10:59:51.608798Z","shell.execute_reply":"2025-02-15T10:59:51.608815Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"fe.info(train_data)","metadata":{"papermill":{"duration":0.079694,"end_time":"2024-12-13T13:23:51.808887","exception":false,"start_time":"2024-12-13T13:23:51.729193","status":"completed"},"tags":[],"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:51.611199Z","iopub.status.idle":"2025-02-15T10:59:51.611578Z","shell.execute_reply.started":"2025-02-15T10:59:51.611404Z","shell.execute_reply":"2025-02-15T10:59:51.611423Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<p style=\"background-color: rgb(247, 230, 202); font-size: 300%; text-align: center; border-radius: 40px 40px; color: rgb(162, 87, 79); font-weight: bold; font-family: 'Roboto'; border: 4px solid rgb(162, 87, 79);\">Models with Cox Target</p>","metadata":{"papermill":{"duration":0.011062,"end_time":"2024-12-13T13:23:51.83194","exception":false,"start_time":"2024-12-13T13:23:51.820878","status":"completed"},"tags":[]}},{"cell_type":"code","source":"ctb1_models, ctb1_oof_preds = md.train_model(CFG.ctb_params, target='target1', title='CatBoost')","metadata":{"papermill":{"duration":4808.205155,"end_time":"2024-12-13T14:44:00.048534","exception":false,"start_time":"2024-12-13T13:23:51.843379","status":"completed"},"tags":[],"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:51.612856Z","iopub.status.idle":"2025-02-15T10:59:51.613254Z","shell.execute_reply.started":"2025-02-15T10:59:51.613034Z","shell.execute_reply":"2025-02-15T10:59:51.613051Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"lgb1_models, lgb1_oof_preds = md.train_model(CFG.lgb_params, target='target1', title='LightGBM')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:51.615330Z","iopub.status.idle":"2025-02-15T10:59:51.615708Z","shell.execute_reply.started":"2025-02-15T10:59:51.615534Z","shell.execute_reply":"2025-02-15T10:59:51.615553Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"ctb1_preds = md.infer_model(test_data, ctb1_models)","metadata":{"papermill":{"duration":0.071675,"end_time":"2024-12-13T14:48:51.427728","exception":false,"start_time":"2024-12-13T14:48:51.356053","status":"completed"},"tags":[],"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:51.616618Z","iopub.status.idle":"2025-02-15T10:59:51.616981Z","shell.execute_reply.started":"2025-02-15T10:59:51.616803Z","shell.execute_reply":"2025-02-15T10:59:51.616822Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"lgb1_preds = md.infer_model(test_data, lgb1_models)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:51.619606Z","iopub.status.idle":"2025-02-15T10:59:51.620016Z","shell.execute_reply.started":"2025-02-15T10:59:51.619809Z","shell.execute_reply":"2025-02-15T10:59:51.619827Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<p style=\"background-color: rgb(247, 230, 202); font-size: 300%; text-align: center; border-radius: 40px 40px; color: rgb(162, 87, 79); font-weight: bold; font-family: 'Roboto'; border: 4px solid rgb(162, 87, 79);\">Models with Kaplan-Meier Target</p>","metadata":{"papermill":{"duration":0.010491,"end_time":"2024-12-13T14:48:51.662203","exception":false,"start_time":"2024-12-13T14:48:51.651712","status":"completed"},"tags":[]}},{"cell_type":"code","source":"ctb2_models, ctb2_oof_preds = md.train_model(CFG.ctb_params, target='target2', title='CatBoost')","metadata":{"papermill":{"duration":2470.336385,"end_time":"2024-12-13T15:30:02.009405","exception":false,"start_time":"2024-12-13T14:48:51.67302","status":"completed"},"tags":[],"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:51.621427Z","iopub.status.idle":"2025-02-15T10:59:51.621772Z","shell.execute_reply.started":"2025-02-15T10:59:51.621610Z","shell.execute_reply":"2025-02-15T10:59:51.621627Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"lgb2_models, lgb2_oof_preds = md.train_model(CFG.lgb_params, target='target2', title='LightGBM')","metadata":{"papermill":{"duration":38.457069,"end_time":"2024-12-13T15:30:40.477711","exception":false,"start_time":"2024-12-13T15:30:02.020642","status":"completed"},"tags":[],"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:51.622985Z","iopub.status.idle":"2025-02-15T10:59:51.623383Z","shell.execute_reply.started":"2025-02-15T10:59:51.623209Z","shell.execute_reply":"2025-02-15T10:59:51.623229Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"ctb2_preds = md.infer_model(test_data, ctb2_models)","metadata":{"papermill":{"duration":0.073959,"end_time":"2024-12-13T15:30:40.563068","exception":false,"start_time":"2024-12-13T15:30:40.489109","status":"completed"},"tags":[],"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:51.624942Z","iopub.status.idle":"2025-02-15T10:59:51.625335Z","shell.execute_reply.started":"2025-02-15T10:59:51.625159Z","shell.execute_reply":"2025-02-15T10:59:51.625178Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"lgb2_preds = md.infer_model(test_data, lgb2_models)","metadata":{"papermill":{"duration":0.170712,"end_time":"2024-12-13T15:30:40.747856","exception":false,"start_time":"2024-12-13T15:30:40.577144","status":"completed"},"tags":[],"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:51.626342Z","iopub.status.idle":"2025-02-15T10:59:51.626674Z","shell.execute_reply.started":"2025-02-15T10:59:51.626517Z","shell.execute_reply":"2025-02-15T10:59:51.626533Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<p style=\"background-color: rgb(247, 230, 202); font-size: 300%; text-align: center; border-radius: 40px 40px; color: rgb(162, 87, 79); font-weight: bold; font-family: 'Roboto'; border: 4px solid rgb(162, 87, 79);\">Models with Nelson-Aalen Target</p>","metadata":{"papermill":{"duration":0.011016,"end_time":"2024-12-13T15:30:40.770359","exception":false,"start_time":"2024-12-13T15:30:40.759343","status":"completed"},"tags":[]}},{"cell_type":"code","source":"ctb3_models, ctb3_oof_preds = md.train_model(CFG.ctb_params, target='target3', title='CatBoost')","metadata":{"papermill":{"duration":2199.149038,"end_time":"2024-12-13T16:07:19.930791","exception":false,"start_time":"2024-12-13T15:30:40.781753","status":"completed"},"tags":[],"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:51.628033Z","iopub.status.idle":"2025-02-15T10:59:51.628415Z","shell.execute_reply.started":"2025-02-15T10:59:51.628253Z","shell.execute_reply":"2025-02-15T10:59:51.628270Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"lgb3_models, lgb3_oof_preds = md.train_model(CFG.lgb_params, target='target3', title='LightGBM')","metadata":{"papermill":{"duration":35.221097,"end_time":"2024-12-13T16:07:55.163635","exception":false,"start_time":"2024-12-13T16:07:19.942538","status":"completed"},"tags":[],"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:51.629608Z","iopub.status.idle":"2025-02-15T10:59:51.629936Z","shell.execute_reply.started":"2025-02-15T10:59:51.629775Z","shell.execute_reply":"2025-02-15T10:59:51.629792Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"ctb3_preds = md.infer_model(test_data, ctb3_models)","metadata":{"papermill":{"duration":0.06646,"end_time":"2024-12-13T16:07:55.241797","exception":false,"start_time":"2024-12-13T16:07:55.175337","status":"completed"},"tags":[],"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:51.631721Z","iopub.status.idle":"2025-02-15T10:59:51.632093Z","shell.execute_reply.started":"2025-02-15T10:59:51.631913Z","shell.execute_reply":"2025-02-15T10:59:51.631932Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"lgb3_preds = md.infer_model(test_data, lgb3_models)","metadata":{"papermill":{"duration":0.164669,"end_time":"2024-12-13T16:07:55.41872","exception":false,"start_time":"2024-12-13T16:07:55.254051","status":"completed"},"tags":[],"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:51.633621Z","iopub.status.idle":"2025-02-15T10:59:51.633954Z","shell.execute_reply.started":"2025-02-15T10:59:51.633789Z","shell.execute_reply":"2025-02-15T10:59:51.633807Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<p style=\"background-color: rgb(247, 230, 202); font-size: 300%; text-align: center; border-radius: 40px 40px; color: rgb(162, 87, 79); font-weight: bold; font-family: 'Roboto'; border: 4px solid rgb(162, 87, 79);\">Models with Cox-Loss Target</p>","metadata":{}},{"cell_type":"code","source":"cox1_models, cox1_oof_preds = md.train_model(CFG.cox1_params, target='target4', title='CatBoost')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:51.635936Z","iopub.status.idle":"2025-02-15T10:59:51.636318Z","shell.execute_reply.started":"2025-02-15T10:59:51.636137Z","shell.execute_reply":"2025-02-15T10:59:51.636162Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"cox2_models, cox2_oof_preds = md.train_model(CFG.cox2_params, target='target4', title='CatBoost')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:51.637552Z","iopub.status.idle":"2025-02-15T10:59:51.637951Z","shell.execute_reply.started":"2025-02-15T10:59:51.637741Z","shell.execute_reply":"2025-02-15T10:59:51.637759Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"cox1_preds = md.infer_model(test_data, cox1_models)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:51.639009Z","iopub.status.idle":"2025-02-15T10:59:51.639386Z","shell.execute_reply.started":"2025-02-15T10:59:51.639218Z","shell.execute_reply":"2025-02-15T10:59:51.639235Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"cox2_preds = md.infer_model(test_data, cox2_models)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:51.640420Z","iopub.status.idle":"2025-02-15T10:59:51.640818Z","shell.execute_reply.started":"2025-02-15T10:59:51.640618Z","shell.execute_reply":"2025-02-15T10:59:51.640637Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<p style=\"background-color: rgb(247, 230, 202); font-size: 300%; text-align: center; border-radius: 40px 40px; color: rgb(162, 87, 79); font-weight: bold; font-family: 'Roboto'; border: 4px solid rgb(162, 87, 79);\">Ensemble Model</p>","metadata":{"papermill":{"duration":0.01174,"end_time":"2024-12-13T16:07:55.442686","exception":false,"start_time":"2024-12-13T16:07:55.430946","status":"completed"},"tags":[]}},{"cell_type":"code","source":"oof_preds = [\n    ctb1_oof_preds, \n    lgb1_oof_preds, \n    ctb2_oof_preds, \n    lgb2_oof_preds, \n    ctb3_oof_preds, \n    lgb3_oof_preds, \n    cox1_oof_preds,\n    cox2_oof_preds\n]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:51.642223Z","iopub.status.idle":"2025-02-15T10:59:51.642566Z","shell.execute_reply.started":"2025-02-15T10:59:51.642405Z","shell.execute_reply":"2025-02-15T10:59:51.642422Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"preds = [\n    ctb1_preds, \n    lgb1_preds, \n    ctb2_preds, \n    lgb2_preds, \n    ctb3_preds, \n    lgb3_preds,\n    cox1_preds,\n    cox2_preds\n]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:51.643863Z","iopub.status.idle":"2025-02-15T10:59:51.644422Z","shell.execute_reply.started":"2025-02-15T10:59:51.644248Z","shell.execute_reply":"2025-02-15T10:59:51.644267Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<div style=\"background-color: rgb(247, 230, 202); border: 4px solid rgb(162, 87, 79); border-radius: 40px; padding: 20px; font-family: 'Roboto'; color: rgb(162, 87, 79); text-align: left; font-size: 140%;\">\n    <b>Calculate C-Index score for Ensemble model using Out-of-Fold (OOF) predictions.</b>\n</div>","metadata":{}},{"cell_type":"code","source":"ranked_oof_preds = np.array([rankdata(p) for p in oof_preds])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:51.646159Z","iopub.status.idle":"2025-02-15T10:59:51.646488Z","shell.execute_reply.started":"2025-02-15T10:59:51.646330Z","shell.execute_reply":"2025-02-15T10:59:51.646347Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"ensemble_oof_preds = np.dot(CFG.weights, ranked_oof_preds)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:51.647812Z","iopub.status.idle":"2025-02-15T10:59:51.648247Z","shell.execute_reply.started":"2025-02-15T10:59:51.648006Z","shell.execute_reply":"2025-02-15T10:59:51.648029Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"md.targets.validate_model(ensemble_oof_preds, 'Ensemble Model')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:51.650195Z","iopub.status.idle":"2025-02-15T10:59:51.650724Z","shell.execute_reply.started":"2025-02-15T10:59:51.650454Z","shell.execute_reply":"2025-02-15T10:59:51.650481Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import optuna\n# 目的関数の定義\ndef objective(trial):\n    # 各モデルの重みを提案 (0.0～1.0 の範囲)\n    weights = [trial.suggest_float(f'weight_{i}', 0.05, 1.0) for i in range(len(ranked_oof_preds))]\n    \n    # 重みの正規化（合計が1になるようにスケーリング）\n    weights = np.array(weights)\n    weights /= np.sum(weights)\n    \n    # アンサンブル予測を計算 (加重平均)\n    ensemble_oof_preds = np.dot(weights, ranked_oof_preds)\n    \n    curent_score = md.targets.validate_model(ensemble_oof_preds, 'Ensemble Model')\n    \n    return curent_score  # 最大化が目標\n\n# Optunaによる最適化\nstudy = optuna.create_study(direction='maximize')  # AUCを最大化\nstudy.optimize(objective, n_trials=200)\n\n# 最適な重み\nprint(\"Best Weights:\", study.best_params)\nprint(\"Best AUC:\", study.best_value)\n\nCFG.weights = [1 for _ in range(len(ranked_oof_preds))]\nnp.array(CFG.weights)\n\nfor i in range(len(CFG.weights)):\n    CFG.weights[i] = study.best_params[f'weight_{i}']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:51.651813Z","iopub.status.idle":"2025-02-15T10:59:51.652275Z","shell.execute_reply.started":"2025-02-15T10:59:51.652058Z","shell.execute_reply":"2025-02-15T10:59:51.652079Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<div style=\"background-color: rgb(247, 230, 202); border: 4px solid rgb(162, 87, 79); border-radius: 40px; padding: 20px; font-family: 'Roboto'; color: rgb(162, 87, 79); text-align: left; font-size: 140%;\">\n    <b>Ensemble predictions for the test data.</b>\n</div>","metadata":{}},{"cell_type":"code","source":"ranked_preds = np.array([rankdata(p) for p in preds])","metadata":{"papermill":{"duration":0.023045,"end_time":"2024-12-13T16:07:55.510197","exception":false,"start_time":"2024-12-13T16:07:55.487152","status":"completed"},"tags":[],"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:51.653794Z","iopub.status.idle":"2025-02-15T10:59:51.654193Z","shell.execute_reply.started":"2025-02-15T10:59:51.653981Z","shell.execute_reply":"2025-02-15T10:59:51.653998Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"ensemble_preds = np.dot(CFG.weights, ranked_preds)","metadata":{"papermill":{"duration":0.020168,"end_time":"2024-12-13T16:07:55.542141","exception":false,"start_time":"2024-12-13T16:07:55.521973","status":"completed"},"tags":[],"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:51.655506Z","iopub.status.idle":"2025-02-15T10:59:51.655874Z","shell.execute_reply.started":"2025-02-15T10:59:51.655696Z","shell.execute_reply":"2025-02-15T10:59:51.655715Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"subm_data = pd.read_csv(CFG.subm_path)\nsubm_data['prediction'] = ensemble_preds","metadata":{"papermill":{"duration":0.043145,"end_time":"2024-12-13T16:07:55.596856","exception":false,"start_time":"2024-12-13T16:07:55.553711","status":"completed"},"tags":[],"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:51.658215Z","iopub.status.idle":"2025-02-15T10:59:51.658592Z","shell.execute_reply.started":"2025-02-15T10:59:51.658415Z","shell.execute_reply":"2025-02-15T10:59:51.658434Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"subm_data.to_csv('submission.csv', index=False)\ndisplay(subm_data.head())","metadata":{"papermill":{"duration":0.027273,"end_time":"2024-12-13T16:07:55.636582","exception":false,"start_time":"2024-12-13T16:07:55.609309","status":"completed"},"tags":[],"trusted":true,"execution":{"iopub.status.busy":"2025-02-15T10:59:51.659785Z","iopub.status.idle":"2025-02-15T10:59:51.660169Z","shell.execute_reply.started":"2025-02-15T10:59:51.659960Z","shell.execute_reply":"2025-02-15T10:59:51.659977Z"}},"outputs":[],"execution_count":null}]}